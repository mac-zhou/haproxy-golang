// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/mac-zhou/haproxy-golang/client/acl"
	"github.com/mac-zhou/haproxy-golang/client/backend"
	"github.com/mac-zhou/haproxy-golang/client/backend_switching_rule"
	"github.com/mac-zhou/haproxy-golang/client/bind"
	"github.com/mac-zhou/haproxy-golang/client/cluster"
	"github.com/mac-zhou/haproxy-golang/client/configuration"
	"github.com/mac-zhou/haproxy-golang/client/defaults"
	"github.com/mac-zhou/haproxy-golang/client/discovery"
	"github.com/mac-zhou/haproxy-golang/client/filter"
	"github.com/mac-zhou/haproxy-golang/client/frontend"
	"github.com/mac-zhou/haproxy-golang/client/global"
	"github.com/mac-zhou/haproxy-golang/client/http_request_rule"
	"github.com/mac-zhou/haproxy-golang/client/http_response_rule"
	"github.com/mac-zhou/haproxy-golang/client/information"
	"github.com/mac-zhou/haproxy-golang/client/log_target"
	"github.com/mac-zhou/haproxy-golang/client/maps"
	"github.com/mac-zhou/haproxy-golang/client/nameserver"
	"github.com/mac-zhou/haproxy-golang/client/peer"
	"github.com/mac-zhou/haproxy-golang/client/peer_entry"
	"github.com/mac-zhou/haproxy-golang/client/reloads"
	"github.com/mac-zhou/haproxy-golang/client/resolver"
	"github.com/mac-zhou/haproxy-golang/client/server"
	"github.com/mac-zhou/haproxy-golang/client/server_switching_rule"
	"github.com/mac-zhou/haproxy-golang/client/service_discovery"
	"github.com/mac-zhou/haproxy-golang/client/sites"
	"github.com/mac-zhou/haproxy-golang/client/specification"
	"github.com/mac-zhou/haproxy-golang/client/specification_openapiv3"
	"github.com/mac-zhou/haproxy-golang/client/stats"
	"github.com/mac-zhou/haproxy-golang/client/stick_rule"
	"github.com/mac-zhou/haproxy-golang/client/stick_table"
	"github.com/mac-zhou/haproxy-golang/client/tcp_request_rule"
	"github.com/mac-zhou/haproxy-golang/client/tcp_response_rule"
	"github.com/mac-zhou/haproxy-golang/client/transactions"
)

// Default h a proxy data plane HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/v2"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http"}

// NewHTTPClient creates a new h a proxy data plane HTTP client.
func NewHTTPClient(formats strfmt.Registry) *HAProxyDataPlane {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new h a proxy data plane HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *HAProxyDataPlane {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new h a proxy data plane client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *HAProxyDataPlane {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(HAProxyDataPlane)
	cli.Transport = transport
	cli.ACL = acl.New(transport, formats)
	cli.Backend = backend.New(transport, formats)
	cli.BackendSwitchingRule = backend_switching_rule.New(transport, formats)
	cli.Bind = bind.New(transport, formats)
	cli.Cluster = cluster.New(transport, formats)
	cli.Configuration = configuration.New(transport, formats)
	cli.Defaults = defaults.New(transport, formats)
	cli.Discovery = discovery.New(transport, formats)
	cli.Filter = filter.New(transport, formats)
	cli.Frontend = frontend.New(transport, formats)
	cli.Global = global.New(transport, formats)
	cli.HTTPRequestRule = http_request_rule.New(transport, formats)
	cli.HTTPResponseRule = http_response_rule.New(transport, formats)
	cli.Information = information.New(transport, formats)
	cli.LogTarget = log_target.New(transport, formats)
	cli.Maps = maps.New(transport, formats)
	cli.Nameserver = nameserver.New(transport, formats)
	cli.Peer = peer.New(transport, formats)
	cli.PeerEntry = peer_entry.New(transport, formats)
	cli.Reloads = reloads.New(transport, formats)
	cli.Resolver = resolver.New(transport, formats)
	cli.Server = server.New(transport, formats)
	cli.ServerSwitchingRule = server_switching_rule.New(transport, formats)
	cli.ServiceDiscovery = service_discovery.New(transport, formats)
	cli.Sites = sites.New(transport, formats)
	cli.Specification = specification.New(transport, formats)
	cli.SpecificationOpenapiv3 = specification_openapiv3.New(transport, formats)
	cli.Stats = stats.New(transport, formats)
	cli.StickRule = stick_rule.New(transport, formats)
	cli.StickTable = stick_table.New(transport, formats)
	cli.TCPRequestRule = tcp_request_rule.New(transport, formats)
	cli.TCPResponseRule = tcp_response_rule.New(transport, formats)
	cli.Transactions = transactions.New(transport, formats)
	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// HAProxyDataPlane is a client for h a proxy data plane
type HAProxyDataPlane struct {
	ACL acl.ClientService

	Backend backend.ClientService

	BackendSwitchingRule backend_switching_rule.ClientService

	Bind bind.ClientService

	Cluster cluster.ClientService

	Configuration configuration.ClientService

	Defaults defaults.ClientService

	Discovery discovery.ClientService

	Filter filter.ClientService

	Frontend frontend.ClientService

	Global global.ClientService

	HTTPRequestRule http_request_rule.ClientService

	HTTPResponseRule http_response_rule.ClientService

	Information information.ClientService

	LogTarget log_target.ClientService

	Maps maps.ClientService

	Nameserver nameserver.ClientService

	Peer peer.ClientService

	PeerEntry peer_entry.ClientService

	Reloads reloads.ClientService

	Resolver resolver.ClientService

	Server server.ClientService

	ServerSwitchingRule server_switching_rule.ClientService

	ServiceDiscovery service_discovery.ClientService

	Sites sites.ClientService

	Specification specification.ClientService

	SpecificationOpenapiv3 specification_openapiv3.ClientService

	Stats stats.ClientService

	StickRule stick_rule.ClientService

	StickTable stick_table.ClientService

	TCPRequestRule tcp_request_rule.ClientService

	TCPResponseRule tcp_response_rule.ClientService

	Transactions transactions.ClientService

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *HAProxyDataPlane) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport
	c.ACL.SetTransport(transport)
	c.Backend.SetTransport(transport)
	c.BackendSwitchingRule.SetTransport(transport)
	c.Bind.SetTransport(transport)
	c.Cluster.SetTransport(transport)
	c.Configuration.SetTransport(transport)
	c.Defaults.SetTransport(transport)
	c.Discovery.SetTransport(transport)
	c.Filter.SetTransport(transport)
	c.Frontend.SetTransport(transport)
	c.Global.SetTransport(transport)
	c.HTTPRequestRule.SetTransport(transport)
	c.HTTPResponseRule.SetTransport(transport)
	c.Information.SetTransport(transport)
	c.LogTarget.SetTransport(transport)
	c.Maps.SetTransport(transport)
	c.Nameserver.SetTransport(transport)
	c.Peer.SetTransport(transport)
	c.PeerEntry.SetTransport(transport)
	c.Reloads.SetTransport(transport)
	c.Resolver.SetTransport(transport)
	c.Server.SetTransport(transport)
	c.ServerSwitchingRule.SetTransport(transport)
	c.ServiceDiscovery.SetTransport(transport)
	c.Sites.SetTransport(transport)
	c.Specification.SetTransport(transport)
	c.SpecificationOpenapiv3.SetTransport(transport)
	c.Stats.SetTransport(transport)
	c.StickRule.SetTransport(transport)
	c.StickTable.SetTransport(transport)
	c.TCPRequestRule.SetTransport(transport)
	c.TCPResponseRule.SetTransport(transport)
	c.Transactions.SetTransport(transport)
}
